name: tests
on:
  pull_request:
  push:
    branches: [ main ]

  schedule:
  - cron: '25 08 * * *'

  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: Debug with tmate
        required: false
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  tests:
    strategy:
      matrix:
        bats_tag: [
          "default",
          "default-optimized",
          "drupal",
          "laravel-redis",
          "laravel-redis-alpine-optimized",
          "laravel-valkey",
          "laravel-valkey-alpine-optimized",
          "laravel-redis-6",
          "drupal-7",
          "drupal-no-settings"
        ]
      fail-fast: false

    runs-on: ubuntu-latest

    steps:
      # TODO: This build step is a temporary workaround to get the DDEV PR
      # binary with PHP addon support.
      - name: Install PHP addon DDEV binary
        run: |
          set -eu -o pipefail
          
          # Get latest successful workflow run with artifacts for PHP addon branch
          RUN_ID=""
          WORKFLOW_RUNS=$(curl -s --fail "https://api.github.com/repos/rfay/ddev/actions/runs?branch=20250806_rfay_php_addon&per_page=5" || echo '{"workflow_runs":[]}')
          # echo "API Response: $WORKFLOW_RUNS"
          
          for run_id in $(echo "$WORKFLOW_RUNS" | jq -r '.workflow_runs[] | select(.conclusion=="success") | .id'); do
            echo "Checking run $run_id for artifacts..."
            ARTIFACT_COUNT=$(curl -s --fail "https://api.github.com/repos/rfay/ddev/actions/runs/$run_id/artifacts" | jq '.total_count')
            echo "Artifact count for run $run_id: $ARTIFACT_COUNT"
            if [ "$ARTIFACT_COUNT" -gt 0 ]; then
              RUN_ID=$run_id
              break
            fi
          done
          
          # Fallback to known working run if API fails
          if [ -z "$RUN_ID" ]; then
            echo "WARNING: Could not find run with artifacts via API, using fallback"
            RUN_ID="16806923996"
          fi
          echo "Using run ID: $RUN_ID"
          
          # Get ddev-linux-amd64 artifact ID from the run
          ARTIFACT_ID=$(curl -s --fail "https://api.github.com/repos/rfay/ddev/actions/runs/$RUN_ID/artifacts" | jq -r '.artifacts[] | select(.name=="ddev-linux-amd64") | .id')
          echo "Artifact ID: $ARTIFACT_ID"
          
          if [ -z "$ARTIFACT_ID" ] || [ "$ARTIFACT_ID" = "null" ]; then
            echo "ERROR: Could not find ddev-linux-amd64 artifact"
            exit 1
          fi
          
          # Download and install PHP addon DDEV binary
          DOWNLOAD_URL="https://nightly.link/rfay/ddev/actions/artifacts/$ARTIFACT_ID.zip"
          echo "Downloading from: $DOWNLOAD_URL"
          curl -sSL --fail "$DOWNLOAD_URL" -o ddev-php-addon.zip
          unzip -q ddev-php-addon.zip
          sudo cp ddev /usr/local/bin/ddev
          sudo chmod +x /usr/local/bin/ddev
          echo "Installed DDEV version:"
          ddev --version

      # Optionally keep the action for setup, but do NOT run tests in it.
      - uses: ddev/github-action-add-on-test@v2
        with:
          ddev_version: "stable"
          token: ${{ secrets.GITHUB_TOKEN }}
          debug_enabled: ${{ github.event.inputs.debug_enabled }}
          addon_repository: ${{ env.GITHUB_REPOSITORY }}
          addon_ref: ${{ env.GITHUB_REF }}
          test_command: true
        env:
          PATH: /usr/local/bin:/home/linuxbrew/.linuxbrew/bin:/snap/bin:/home/runner/.local/bin:/opt/pipx_bin:/home/runner/.cargo/bin:/home/runner/.config/composer/vendor/bin:/usr/local/.ghcup/bin:/home/runner/.dotnet/tools:/usr/local/sbin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin

      # Overwrite linuxbrew DDEV binary with PHP addon version
      - name: Unlink ddev from homebrew
        run: |
          brew unlink ddev
          hash -r
          ddev --version

      # Run bats tests with correct DDEV version
      - name: Run bats tests with correct DDEV version
        run: |
          which -a ddev
          ddev --version
          bats tests --filter-tags ${{ matrix.bats_tag }}
        env:
          PATH: /usr/local/bin:/home/linuxbrew/.linuxbrew/bin:/snap/bin:/home/runner/.local/bin:/opt/pipx_bin:/home/runner/.cargo/bin:/home/runner/.config/composer/vendor/bin:/usr/local/.ghcup/bin:/home/runner/.dotnet/tools:/usr/local/sbin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
